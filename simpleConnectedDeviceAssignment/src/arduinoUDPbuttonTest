/*

  Simple connected device assignment:  
  For now it just send 0 or 1 for the push of some buttons. Will implement humidity sensor after I make sure this works. 
  March 3, 2019
  By Ingie Baho
  
*/

#include <SPI.h>
#include <WiFiNINA.h>
#include <WiFiUdp.h>

int status = WL_IDLE_STATUS;
#include "arduino_secrets.h"

// enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = SECRET_SSID;        // your network SSID (name)
char pass[] = SECRET_PASS;    // your network password (use for WPA, or use as key for WEP)


//local port to listen on, not needed for now
unsigned int localPort = 5000;      

//buffer to hold incoming packet, not needed for now 
char packetBuffer[255];  

WiFiUDP Udp;

//buttons representing sensors for now
const int button1 = 0;
const int button2 = 1;
const int button3 = 2;

//the button state so we only send
// when the state changes

boolean buttonState1;
boolean lastButtonState1 = LOW; // arbitrary
boolean buttonState2;
boolean lastButtonState2 = LOW;
boolean buttonState3;
boolean lastButtonState3 = LOW;

void setup() {
  
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }

  // attempt to connect to WiFi network:
  while ( status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    
    // Connect to WPA/WPA2 network
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    delay(10000);
  }
  
  Serial.println("Connected to wifi");
  printWiFiStatus();

  Serial.print("Initializing WiFiUDP library and listening on port ");
  Serial.println(localPort);
  Udp.begin(localPort);
}

void loop() {
  
  // IP address of the receiving device, Linux computer's IP address (mine for now because Linux is dead)
  IPAddress receivingDeviceAddress(192, 168, 1, 17); 
  unsigned int receivingDevicePort = 2390;  //should be the same in server.js code 

  //read data from buttons
  buttonState1 = digitalRead(button1); 
  buttonState2 = digitalRead(button2); 
  buttonState3 = digitalRead(button3); 
  
  //checking if a button was pushed 
  if ((buttonState1 ! = lastButtonState1) || (buttonState2 ! = lastButtonState2) || (buttonState3 ! = lastButtonState3) ) 
  {
    //print button states 
    
   void printButtonStatus(buttonState1, buttonState2, buttonState3)
    
   Udp.beginPacket(receivingDeviceAddress, receivingDevicePort);

   Udp.write(buttonState1);
   Udp.write(buttonState2);
   Udp.write(buttonState3);
   
   Udp.endPacket();
   
   lastButtonState1 =  buttonState1;
   lastButtonState2 =  buttonState2;
   lastButtonState3 =  buttonState3;
   
  }




void printWiFiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("My IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}

void printButtonStatus(boolean buttonState1, boolean buttonState2, boolean buttonState3){
  Serial.print("Button 1: ");
  Serial.println(buttonState1);
  Serial.print("Button 2: ");
  Serial.println(buttonState2);
  Serial.print("Button 3: ");
  Serial.println(buttonState3);
  }
